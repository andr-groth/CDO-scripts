{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#overview","title":"Overview","text":"<p>The collection of scripts offers a convenient way to process multiple netCDF files with the Climate Data Operators (CDO) tool.</p>"},{"location":"#requirements","title":"Requirements","text":"<p>Climate Data Operators (CDO) tool is required, which can be installed with:</p> <pre><code>sudo apt install cdo\n</code></pre> <p>Scripts tested with CDO version 2.0.4-1 on Ubuntu 22.04.</p>"},{"location":"#main-scripts","title":"Main scripts","text":"<p>The main scripts are:</p> <ul> <li> <p>The <code>get_anom.sh</code> script is used to obtain anomalies for multiple netCDF files.</p> </li> <li> <p>The <code>get_eofs.sh</code> script is used to obtain ensemble Empirical Orthogonal Functions (EOFs) from multiple netCDF files.</p> </li> <li> <p>The <code>get_pcs.sh</code> script is used to calculate Principal Components (PCs) for multiple netCDF files.</p> </li> </ul>"},{"location":"#script-combinations","title":"Script combinations","text":"<p>Further scripts provide a combination of the main scripts:</p> <ul> <li> <p>The <code>prepare_data.sh</code> script performs three main steps: creating anomalies, calculating ensemble EOFs, and obtaining individual PCs.</p> </li> <li> <p>The <code>prepare_data2.sh</code> script performs two main steps: creating anomalies and obtaining individual PCs. In contrast to the script <code>prepare_data.sh</code>, the EOFs are not calculated from the netCDF files in the given folder, but provided as an additional argument to the script.</p> </li> </ul>"},{"location":"#additional-scripts","title":"Additional scripts","text":"<p>Additional scripts are:</p> <ul> <li>The <code>merge.sh</code> script is used to merge netCDF files in time with the same filename prefix in a specified directory.</li> </ul>"},{"location":"get_anom/","title":"Get anomalies","text":"<p>The <code>get_anom.sh</code> script is used to obtain anomalies for multiple files. It reads parameters from a configuration file and applies them to the input files to generate anomalies. The anomalies are saved in a subfolder named <code>anom/</code> within the input file's folder, with <code>anom_</code> prepended to the input file's name. Additionally, the corresponding climatological mean fields are saved in a subfolder named <code>anom/mean/</code>, with <code>mean_</code> prepended to the input file's name.</p>"},{"location":"get_anom/#usage","title":"Usage","text":"<pre><code>./get_anom.sh CONFIGFILE INFILES\n</code></pre>"},{"location":"get_anom/#arguments","title":"Arguments","text":"<ul> <li><code>CONFIGFILE</code>: Shell script that defines the parameters.</li> <li><code>INFILES</code>: One or more input netCDF files for which anomalies will be obtained.</li> </ul>"},{"location":"get_anom/#configuration-file","title":"Configuration file","text":"<p>The <code>CONFIGFILE</code> provides the parameters required for anomaly creation. The following parameters are used by the script:</p> <ul> <li><code>date</code>: The start and end dates for the anomalies in the format <code>startdate,enddate</code>. Used in the <code>cdo seldate</code> command.</li> <li><code>grid</code>: The grid name used in the <code>cdo remapcon</code> command.</li> <li><code>landmask</code>: A boolean parameter (<code>true</code> or <code>false</code>) that restricts grid points to land.</li> <li><code>logscale</code>: A boolean parameter (<code>true</code> or <code>false</code>) that converts variables to log scale.</li> <li><code>lonlatbox</code>: Longitude and latitude limits used in the <code>cdo sellonlatbox</code> command in the format <code>longitude_min,longitude_max,latitude_min,latitude_max</code>.</li> <li><code>min</code>: The minimum value used for log scale conversion.</li> <li><code>names</code>: Variable name(s) used in the <code>cdo selname</code> command.</li> <li> <p><code>regions</code>: The filename defining a region used in the <code>cdo maskregion</code> command.</p> </li> <li> <p><code>refdate</code>: The start and end dates for the climatological mean used in the <code>cdo seldate</code> command.</p> </li> </ul>"},{"location":"get_anom/#output","title":"Output","text":"<ul> <li>The anomalies are saved in a subfolder named <code>anom/</code> within the input file's folder, with <code>anom_</code> prepended to the   input file's name.</li> <li>The corresponding climatological mean fields are saved in a subfolder named <code>anom/mean/</code>, with <code>mean_</code> prepended to the input file's name.</li> </ul>"},{"location":"get_anom/#example","title":"Example","text":"<p>Here's an example to illustrate the usage of the <code>get_anom.sh</code> script:</p> <p>Suppose we have the following configuration file named <code>config.sh</code>:</p> <pre><code>date=\"1850-01-01,2014-12-31\"\ngrid=\"global_1\"\nlandmask=false\nlogscale=false\nlonlatbox=\"-180,180,-90,90\"\nmin=\nnames=\"sst\"\nregions=\nrefdate=\"1900-01-01,1999-12-31\"\n</code></pre> <p>And we want to create anomalies for all netCDF files in <code>path/to/files/*.nc</code>.</p> <p>To execute the script with the given configuration file and input files, we run the following command:</p> <pre><code>./get_anom.sh config.sh path/to/files/*.nc\n</code></pre> <p>The script reads the parameters from <code>config.sh</code> and process the input files accordingly. Anomalies will be saved in the <code>path/to/files/anom/</code> subfolder, with <code>anom_</code> prepended to the original file names. The corresponding climatological mean fields will be saved in the <code>path/to/files/anom/mean/</code> subfolder, with <code>mean_</code> prepended to the original file names.</p> <p>Note</p> <ul> <li>Examples of <code>CONFIGFILE</code> file can be found in the <code>configs/</code> folder of this repository.</li> <li>Examples of <code>regions</code> files can be found in the <code>regions/</code> folder of this respository.</li> </ul>"},{"location":"get_eofs/","title":"Get EOFs","text":"<p>The <code>get_eofs.sh</code> script is used to obtain ensemble Empirical Orthogonal Functions (EOFs) from multiple netCDF files. The script concatenates the input files in time and calculates a single set of EOFs and eigenvalues. The number of EOFs to calculate is specified as the first argument to the script.</p>"},{"location":"get_eofs/#usage","title":"Usage","text":"<pre><code>./get_eofs.sh NEOFS INFILES\n</code></pre>"},{"location":"get_eofs/#arguments","title":"Arguments","text":"<ul> <li><code>NEOFS</code>: The number of EOFs to calculate.</li> <li><code>INFILES</code>: One or more input netCDF files from which to calculate the EOFs.</li> </ul>"},{"location":"get_eofs/#output","title":"Output","text":"<p>The script saves the following output files in a subfolder named <code>pcs/</code>, created in the folder of the first input file:</p> <ul> <li><code>eigenvalues.csv</code>: A CSV file containing the eigenvalues of the EOFs.</li> <li><code>eofs.nc</code>: A netCDF file containing the ensemble EOFs.</li> </ul>"},{"location":"get_pcs/","title":"Get PCs","text":"<p>The <code>get_pcs.sh</code> script is used to calculate Principal Components (PCs) for multiple netCDF files projected onto a given set of Empirical Orthogonal Functions (EOFs).</p>"},{"location":"get_pcs/#usage","title":"Usage","text":"<pre><code>./get_pcs.sh EOFFILE INFILES\n</code></pre>"},{"location":"get_pcs/#arguments","title":"Arguments","text":"<ul> <li><code>EOFFILE</code>: The netCDF file with the EOFs.</li> <li><code>INFILES</code>: The netCDF files that are projected onto the EOFs to obtain the PCs.</li> </ul>"},{"location":"get_pcs/#output","title":"Output","text":"<p>The PCs are saved in the folder of the EOF file, with <code>pcs_</code> prepended to the filename.</p>"},{"location":"get_pcs/#example","title":"Example","text":"<p>Suppose we have the following files in the current directory:</p> <ul> <li><code>eof.nc</code>: NetCDF file containing the EOFs.</li> <li><code>data1.nc</code>: NetCDF file to be projected onto the EOFs.</li> <li><code>data2.nc</code>: Another NetCDF file to be projected onto the EOFs.</li> </ul> <p>To calculate the PCs for <code>data1.nc</code> and <code>data2.nc</code> using the EOFs in <code>eof.nc</code>, we would run the following command:</p> <pre><code>./get_pcs.sh eof.nc data1.nc data2.nc\n</code></pre> <p>The script would generate PC files for each input file, named <code>pcs_data1.nc</code> and <code>pcs_data2.nc</code>, respectively, and save them in the same directory as <code>eof.nc</code>.</p>"},{"location":"merge/","title":"Merge netCDF files","text":"<p>The <code>merge.sh</code> script is used to merge netCDF files in time with the same filename prefix in a specified directory.</p>"},{"location":"merge/#usage","title":"Usage","text":"<pre><code>./merge.sh [path]\n</code></pre>"},{"location":"merge/#arguments","title":"Arguments","text":"<ul> <li><code>path</code>:  optional argument specifiyng the directory containing the NetCDF files to be merged. If no path is provided, the current directory <code>.</code> will be used as the default.</li> </ul>"},{"location":"merge/#outputs","title":"Outputs","text":"<p>The script executes the following steps:</p> <ol> <li>Sets up the output directory for the merged files. The directory is named <code>merged/</code> and is created within the specified <code>path</code> or default <code>.</code> input directory.</li> <li>Identifies groups of files based on a substring (prefix) extracted before the last underscore in each file's name.</li> <li>Merges the files with the same prefix.<ul> <li>If the output file already exists, the script skips merging and displays information about the existing file.</li> <li>If the output file doesn't exist, the script performs the merging operation using CDO's <code>mergetime</code> functionality. The merged file is saved in the output directory with the same prefix.</li> </ul> </li> </ol>"},{"location":"merge/#example","title":"Example","text":"<p>Suppose we have four files <code>file_1_a.nc</code>, <code>file_1_b.nc</code> <code>file_2_a.nc</code>, and <code>file_2_b.nc</code> in the directory <code>path/to/files/</code>. To merge the files with the same prefix, we would run the following command:</p> <pre><code>./merge.sh path/to/files/\n</code></pre> <p>The script will merge:</p> <ul> <li><code>file_1_a.nc</code> and <code>file_1_b.nc</code> in <code>file_1.nc</code></li> <li><code>file_2_a.nc</code> and <code>file_2_b.nc</code> in <code>file_2.nc</code></li> </ul> <p>The merged files will be saved in <code>path/to/files/merged</code>.</p>"},{"location":"prepare_data/","title":"Prepare data","text":"<p>The <code>prepare_data.sh</code> script is used to process netCDF files in a given folder. It performs three main steps: creating anomalies, calculating ensemble EOFs (Empirical Orthogonal Functions), and obtaining individual PCs (Principal Components). The resulting anomalies, EOFS, and PCs are saved in specific subfolders within the input folder <code>FILEPATH</code>.</p>"},{"location":"prepare_data/#usage","title":"Usage","text":"<p>To use the script, run the following command in the terminal:</p> <pre><code>./prepare_data.sh CONFIGFILE NEOFS FILEPATH\n</code></pre>"},{"location":"prepare_data/#arguments","title":"Arguments","text":"<ul> <li><code>CONFIGFILE</code>: The configuration file that provides parameters for creating anomalies.</li> <li><code>NEOFS</code>: The number of EOFs to calculate.</li> <li><code>FILEPATH</code>: The path to the folder containing the netCDF files to be processed. The script will process all <code>*.nc</code>   files in the folder.</li> </ul>"},{"location":"prepare_data/#workflow","title":"Workflow","text":"<ol> <li> <p>Create Anomalies</p> <ul> <li>The script calls the <code>get_anom.sh</code> script to create anomalies for each input netCDF file.</li> <li>The configuration file (<code>CONFIGFILE</code>) and the path to the netCDF files (<code>FILEPATH</code>) are provided as arguments.</li> <li>Anomalies are created for each input file matching <code>*.nc</code>, using the specified parameters from the configuration file.</li> </ul> </li> <li> <p>Calculate Ensemble EOFs</p> <ul> <li>The script calls the <code>get_eofs.sh</code> script to calculate ensemble EOFs and eigenvalues.</li> <li>The number of EOFs to calculate is determined by the <code>NEOFS</code> argument.</li> <li>The anomalies created in the previous step are used as input.</li> </ul> </li> <li> <p>Obtain Individual PCs</p> <ul> <li>The script calls the <code>get_pcs.sh</code> script to obtain individual PCs by projecting the anomalies onto the ensemble EOFs.</li> </ul> </li> </ol>"},{"location":"prepare_data/#output","title":"Output","text":"<p>The resulting data files are saved in the following subfolders:</p> <ul> <li>Anomalies: The resulting anomalies are saved in a subfolder named <code>anom</code> within <code>FILEPATH</code>.</li> <li>Ensemble EOFs: The calculated EOFs are saved in a subfolder named <code>anom/pcs</code> within <code>FILEPATH</code>.</li> <li>PCs: The individual PCs are saved in a subfolder named <code>anom/pcs</code> within <code>FILEPATH</code>.</li> </ul>"},{"location":"prepare_data/#example","title":"Example","text":"<p>Suppose we want to process netCDF files located in the folder <code>data/files/</code>. We have a configuration file named <code>config.sh</code>, and we want to calculate 10 EOFs.</p> <p>The command to run the script would be:</p> <pre><code>./prepare_data.sh config.sh 10 data/files/\n</code></pre> <p>The resulting data files are:</p> <ul> <li>Anomalies: <code>data/files/anom/anom_*.nc</code>.</li> <li>Ensemble EOFs: <code>data/files/anom/pcs/eofs.nc</code>.</li> <li>PCs: <code>data/files/anom/pcs/pcs_*.nc</code>.</li> </ul>"},{"location":"prepare_data2/","title":"Prepare data2","text":"<p>The <code>prepare_data2.sh</code> script is used to process netCDF files in a given folder. It performs two main steps: creating anomalies and obtaining individual PCs (Principal Components).</p> <p>Note</p> <p>In contrast to the <code>prepare_data.sh</code>, the EOFs are not calculated from the anomalies, but provided as an additional argument <code>EOFFILES</code> to the script.</p>"},{"location":"prepare_data2/#usage","title":"Usage","text":"<p>To use the script, run the following command in the terminal:</p> <pre><code>./prepare_data2.sh CONFIGFILE EOFFILE FILEPATH\n</code></pre>"},{"location":"prepare_data2/#arguments","title":"Arguments","text":"<ul> <li><code>CONFIGFILE</code>: The configuration file that provides parameters for creating anomalies.</li> <li><code>EOFFILE</code>: The file containing the EOFs.</li> <li><code>FILEPATH</code>: The path to the folder containing the netCDF files to be processed.  The script will process all <code>*.nc</code>   files in the folder.</li> </ul>"},{"location":"prepare_data2/#workflow","title":"Workflow","text":"<ol> <li> <p>Create Anomalies</p> <ul> <li>The script calls the <code>get_anom.sh</code> script to create anomalies for each input netCDF file.</li> <li>Anomalies are created for each input file using the specified parameters from the configuration file.</li> </ul> </li> <li> <p>Make a copy of EOFs</p> <ul> <li>The provided EOFs file (<code>EOFFILE</code>) is copied to a subfolder named <code>prj/</code> within <code>FILEPATH</code>. The <code>prj/</code> subfolder is created if it doesn't already exist.</li> </ul> </li> <li> <p>Obtain Individual PCs</p> <ul> <li>The script calls the <code>get_pcs.sh</code> script to obtain individual PCs by projecting the anomalies from the first step onto the copied EOFs.</li> </ul> </li> </ol>"},{"location":"prepare_data2/#output","title":"Output","text":"<p>The resulting data files are saved in the following subfolders:</p> <ul> <li>Anomalies: The resulting anomalies are saved in a subfolder named <code>anom/</code> within <code>FILEPATH</code>.</li> <li>Copied EOFs: The copied EOFs are saved in a subfolder named <code>anom/prj/</code> within <code>FILEPATH</code>.</li> <li>PCs: The individual PCs are saved in a subfolder named <code>anom/prj/</code> within <code>FILEPATH</code>.</li> </ul>"},{"location":"prepare_data2/#example","title":"Example","text":"<p>Suppose we want to process netCDF files located in the folder <code>data2/files/</code>. We have a configuration file named <code>config.sh</code>, and we have EOFs stored in the file <code>data/eofs.nc</code>.</p> <p>The command to run the script would be:</p> <pre><code>./prepare_data2.sh config.sh data/eofs.nc data2/files/\n</code></pre> <p>The resulting data files are:</p> <ul> <li>Anomalies: <code>data2/files/anom/anom_*.nc</code>.</li> <li>Copied EOFs: <code>data2/files/anom/prj/eofs.nc</code>.</li> <li>PCs: <code>data2/files/anom/prj/pcs_*.nc</code>.</li> </ul>"}]}